"use strict";var ApplicationConfiguration=function(){var applicationModuleName="hbg",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("inventories"),ApplicationConfiguration.registerModule("members"),ApplicationConfiguration.registerModule("records"),ApplicationConfiguration.registerModule("users"),angular.module("articles").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Articles","articles","dropdown","/articles(/create)?"),Menus.addSubMenuItem("topbar","articles","List Articles","articles"),Menus.addSubMenuItem("topbar","articles","New Article","articles/create")}]),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listArticles",{url:"/articles",templateUrl:"modules/articles/views/list-articles.client.view.html"}).state("createArticle",{url:"/articles/create",templateUrl:"modules/articles/views/create-article.client.view.html"}).state("viewArticle",{url:"/articles/:articleId",templateUrl:"modules/articles/views/view-article.client.view.html"}).state("editArticle",{url:"/articles/:articleId/edit",templateUrl:"modules/articles/views/edit-article.client.view.html"})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles",function($scope,$stateParams,$location,Authentication,Articles){$scope.authentication=Authentication,$scope.create=function(){var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(){var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("about",{url:"/about",templateUrl:"modules/core/views/about.client.view.html"}).state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("AboutController",["$scope",function(){}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("inventories").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Inventories","inventories","dropdown","/inventories(/create)?"),Menus.addSubMenuItem("topbar","inventories","List Inventories","inventories"),Menus.addSubMenuItem("topbar","inventories","New Inventory","inventories/create")}]),angular.module("inventories").config(["$stateProvider",function($stateProvider){$stateProvider.state("listInventories",{url:"/inventories",templateUrl:"modules/inventories/views/list-inventories.client.view.html"}).state("createInventory",{url:"/inventories/create",templateUrl:"modules/inventories/views/create-inventory.client.view.html"}).state("viewInventory",{url:"/inventories/:inventoryId",templateUrl:"modules/inventories/views/view-inventory.client.view.html"}).state("editInventory",{url:"/inventories/:inventoryId/edit",templateUrl:"modules/inventories/views/edit-inventory.client.view.html"})}]),angular.module("inventories").controller("InventoriesController",["$scope","$stateParams","$location","Authentication","Inventories",function($scope,$stateParams,$location,Authentication,Inventories){$scope.authentication=Authentication,$scope.create=function(){var inventory=new Inventories({name:this.name});inventory.$save(function(response){$location.path("inventories/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(inventory){if(inventory){inventory.$remove();for(var i in $scope.inventories)$scope.inventories[i]===inventory&&$scope.inventories.splice(i,1)}else $scope.inventory.$remove(function(){$location.path("inventories")})},$scope.update=function(){var inventory=$scope.inventory;inventory.$update(function(){$location.path("inventories/"+inventory._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.inventories=Inventories.query()},$scope.findOne=function(){$scope.inventory=Inventories.get({inventoryId:$stateParams.inventoryId})}}]),angular.module("inventories").directive("invSearch",[function(){return{template:"<div>{{keyword}}</div>",restrict:"EA",scope:{keyword:"=search.keyword"},link:function(){}}}]),angular.module("inventories").factory("Inventories",["$resource",function($resource){return $resource("inventories/:inventoryId",{inventoryId:"@_id"},{update:{method:"PUT"}})}]),angular.module("members").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Members","members","dropdown","/members(/create)?"),Menus.addSubMenuItem("topbar","members","List Members","members"),Menus.addSubMenuItem("topbar","members","New Member","members/create")}]),angular.module("members").config(["$stateProvider",function($stateProvider){$stateProvider.state("listMembers",{url:"/members",templateUrl:"modules/members/views/list-members.client.view.html"}).state("createMember",{url:"/members/create",templateUrl:"modules/members/views/create-member.client.view.html"}).state("viewMember",{url:"/members/:memberId",templateUrl:"modules/members/views/view-member.client.view.html"}).state("editMember",{url:"/members/:memberId/edit",templateUrl:"modules/members/views/edit-member.client.view.html"})}]),angular.module("hbg").controller("DatepickerDemoCtrl",["$scope",function($scope){$scope.today=function(){$scope.dt=new Date},$scope.today(),$scope.clear=function(){$scope.dt=null},$scope.disabled=function(date,mode){return"day"===mode&&(0===date.getDay()||6===date.getDay())},$scope.toggleMin=function(){$scope.minDate=$scope.minDate?null:new Date},$scope.toggleMin(),$scope.open=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.opened=!0},$scope.dateOptions={formatYear:"yy",startingDay:1}}]),angular.module("members").controller("MembersController",["$scope","$stateParams","$location","Authentication","Members",function($scope,$stateParams,$location,Authentication,Members){$scope.authentication=Authentication,$scope.create=function(){var member=new Members({name:this.name});member.$save(function(response){$location.path("members/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(member){if(member){member.$remove();for(var i in $scope.members)$scope.members[i]===member&&$scope.members.splice(i,1)}else $scope.member.$remove(function(){$location.path("members")})},$scope.update=function(){var member=$scope.member;member.$update(function(){$location.path("members/"+member._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.members=Members.query()},$scope.findOne=function(){$scope.member=Members.get({memberId:$stateParams.memberId})},$scope.findByCardNumber=function(card_number){$scope.member=Members.get({card_number:card_number})}}]),angular.module("members").factory("Members",["$resource",function($resource){return $resource("members/:memberId",{memberId:"@_id"},{update:{method:"PUT"}})}]),angular.module("records").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Records","records","dropdown","/records(/create)?"),Menus.addSubMenuItem("topbar","records","List Records","records"),Menus.addSubMenuItem("topbar","records","New Record","records/create")}]),angular.module("records").config(["$stateProvider",function($stateProvider){$stateProvider.state("listRecords",{url:"/records",templateUrl:"modules/records/views/list-records.client.view.html"}).state("createRecord",{url:"/records/create",templateUrl:"modules/records/views/create-record.client.view.html"}).state("viewRecord",{url:"/records/:recordId",templateUrl:"modules/records/views/view-record.client.view.html"}).state("editRecord",{url:"/records/:recordId/edit",templateUrl:"modules/records/views/edit-record.client.view.html"})}]),angular.module("records").controller("RecordsController",["$scope","$stateParams","$location","Authentication","Records",function($scope,$stateParams,$location,Authentication,Records){$scope.authentication=Authentication,$scope.create=function(){var record=new Records({name:this.name});record.$save(function(response){$location.path("records/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(record){if(record){record.$remove();for(var i in $scope.records)$scope.records[i]===record&&$scope.records.splice(i,1)}else $scope.record.$remove(function(){$location.path("records")})},$scope.update=function(){var record=$scope.record;record.$update(function(){$location.path("records/"+record._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.records=Records.query()},$scope.findOne=function(){$scope.record=Records.get({recordId:$stateParams.recordId})}}]),angular.module("records").factory("Records",["$resource",function($resource){return $resource("records/:recordId",{recordId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:$location.path("403")}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("403",{url:"/403",templateUrl:"modules/users/views/authentication/403.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Members","Authentication",function($scope,$http,$location,Users,Members,Authentication){$scope.user=Authentication.user,$scope.member_card_number=$scope.user.member?$scope.user.member.card_number:"",$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null,$scope.member_card_number&&($scope.user.member=Members.findByCardNumber($scope.member_card_number));var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);