"use strict";var ApplicationConfiguration=function(){var applicationModuleName="hbg",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ngQuickDate","brantwills.paging"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("inventories"),ApplicationConfiguration.registerModule("members"),ApplicationConfiguration.registerModule("records"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("about",{url:"/about",templateUrl:"modules/core/views/about.client.view.html"}).state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("AboutController",["$scope",function(){}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication){$scope.authentication=Authentication;var hasAdminRole=function(){return Array.prototype.contains=function(obj){for(var i=this.length;i--;)if(this[i]===obj)return!0;return!1},""!==$scope.authentication.user?$scope.authentication.user.roles.contains("admin"):!1};$scope.isAdmin=hasAdminRole(),$scope.member_id=$scope.authentication.user.member,$scope.$on("$stateChangeSuccess",function(){$scope.isAdmin=hasAdminRole()})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("inventories").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Inventories","inventories","dropdown","/inventories(/create)?"),Menus.addSubMenuItem("topbar","inventories","List Inventories","inventories"),Menus.addSubMenuItem("topbar","inventories","New Inventory","inventories/create")}]),angular.module("inventories").config(["$stateProvider",function($stateProvider){$stateProvider.state("listInventories",{url:"/inventories",templateUrl:"modules/inventories/views/list-inventories.client.view.html"}).state("createInventory",{url:"/inventories/create",templateUrl:"modules/inventories/views/create-inventory.client.view.html"}).state("viewInventory",{url:"/inventories/:inventoryId",templateUrl:"modules/inventories/views/view-inventory.client.view.html"}).state("editInventory",{url:"/inventories/:inventoryId/edit",templateUrl:"modules/inventories/views/edit-inventory.client.view.html"})}]),angular.module("inventories").controller("InventoriesController",["$scope","$http","$timeout","$stateParams","$location","Authentication","Inventories",function($scope,$http,$timeout,$stateParams,$location,Authentication,Inventories){$scope.authentication=Authentication,$scope.newTags=[],$scope.canSubmit=!0;var timeout;$scope.create=function(){$scope.canSubmit=!1;var inventory=new Inventories({name:this.name,store_name:this.store_name,owner:this.owner,inv_code:this.inv_code,location:this.location,tags:this.newTags,isbn:this.isbn,skuid:this.skuid,url:this.url,img:this.img,author:this.author,pub_by:this.pub_by,pub_date:this.pub_date});inventory.$save(function(response){$location.path("inventories/"+response._id),$scope.canSubmit=!0},function(errorResponse){$scope.error=errorResponse.data.message,$scope.canSubmit=!0})},$scope.remove=function(inventory){if(inventory){inventory.$remove();for(var i in $scope.inventories)$scope.inventories[i]===inventory&&$scope.inventories.splice(i,1)}else $scope.inventory.$remove(function(){$location.path("inventories")})},$scope.update=function(){var inventory=$scope.inventory;inventory.$update(function(){$location.path("inventories/"+inventory._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.inventories=Inventories.query()},$scope.save_quick_edit=function(index){var _inventory=new Inventories($scope.inventories[index]);console.log("_inventory:",_inventory),_inventory.$update(function(){},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.initPaging=function(){$http({method:"GET",url:"/inventories/total"}).success(function(data){$scope.totalSize=data.size}),$scope.currentPage=1,$scope.pageSize=25,$http({method:"GET",url:"/inventories/page/"+$scope.currentPage+"/"+$scope.pageSize}).success(function(data){$scope.inventories=data})},$scope.findOne=function(){$scope.inventory=Inventories.get({inventoryId:$stateParams.inventoryId})},$scope.addTag=function(){$scope.inventory.tags.push({name:this.newTag}),this.newTag=""},$scope.addNewTag=function(){$scope.newTags.push({name:this.newTag}),this.newTag=""},$scope.$watch("keyword",function(newKeyword){$scope.searching=!0,newKeyword&&(timeout&&$timeout.cancel(timeout),timeout=$timeout(function(){$http({method:"GET",url:"/inventories/name/"+newKeyword}).success(function(data){$scope.inventories=data,$scope.searching=!1,$http({method:"GET",url:"/inventories/isbn/"+newKeyword}).success(function(books){for(var i=0;i<books.length;i++)$scope.inventories.push(books[i]);$scope.totalSize=$scope.inventories.length})})},350))}),$scope.fillFormAuto=function(index){var book=$scope.inventories[index];$scope.name=book.name,$scope.isbn=book.isbn,$scope.skuid=book.skuid,$scope.url=book.url,$scope.img=book.img,$scope.author=book.author,$scope.pub_by=book.pub_by,$scope.pub_date=book.pub_date,$scope.inventories=[],$scope.keyword=""},$scope.fillEditFormAuto=function(index){var book=$scope.inventories[index];$scope.inventory.name=book.name,$scope.inventory.isbn=book.isbn,$scope.inventory.skuid=book.skuid,$scope.inventory.url=book.url,$scope.inventory.img=book.img,$scope.inventory.author=book.author,$scope.inventory.pub_by=book.pub_by,$scope.inventory.pub_date=book.pub_date,$scope.inventories=[],$scope.keyword=""},$scope.DoCtrlPagingAct=function(){$scope.inventories=[],$http({method:"GET",url:"/inventories/page/"+$scope.currentPage+"/"+$scope.pageSize}).success(function(data){$scope.inventories=data})}}]),angular.module("inventories").directive("invSearch",[function(){return{template:"<div>{{keyword}}</div>",restrict:"EA",scope:{keyword:"=search.keyword"},link:function(){}}}]),angular.module("inventories").factory("Inventories",["$resource",function($resource){return $resource("inventories/:inventoryId",{inventoryId:"@_id"},{update:{method:"PUT"}})}]),angular.module("members").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Members","members","dropdown","/members(/create)?"),Menus.addSubMenuItem("topbar","members","List Members","members"),Menus.addSubMenuItem("topbar","members","New Member","members/create")}]),angular.module("members").config(["$stateProvider",function($stateProvider){$stateProvider.state("listMembers",{url:"/members",templateUrl:"modules/members/views/list-members.client.view.html"}).state("createMember",{url:"/members/create",templateUrl:"modules/members/views/create-member.client.view.html"}).state("viewMember",{url:"/members/:memberId",templateUrl:"modules/members/views/view-member.client.view.html"}).state("editMember",{url:"/members/:memberId/edit",templateUrl:"modules/members/views/edit-member.client.view.html"})}]),angular.module("members").controller("MembersController",["$scope","$http","$stateParams","$location","Authentication","Members","Records","Inventories",function($scope,$http,$stateParams,$location,Authentication,Members,Records,Inventories){$scope.authentication=Authentication,$scope.records=[],$scope.create=function(){var member=new Members({phone_number:this.phone_number,baby_name:this.baby_name,baby_birthday:this.baby_birthday,isBoy:this.isBoy,card_number:this.card_number,valid_days:this.valid_days,level:this.level,parent_name:this.parent_name,address:this.address,email:this.email,weixin:this.weixin,other:this.other});member.$save(function(response){$location.path("members/"+response._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(member){if(member){member.$remove();for(var i in $scope.members)$scope.members[i]===member&&$scope.members.splice(i,1)}else $scope.member.$remove(function(){$location.path("members")})},$scope.update=function(){var member=$scope.member;member.$update(function(){$location.path("members/"+member._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.members=Members.query()},$scope.findOne=function(){$scope.member=Members.get({memberId:$stateParams.memberId})},$scope.freeze=function(){$scope.member.locked=!0,$scope.update()},$scope.unfreeze=function(){$scope.member.locked=!1,$scope.update()},$scope.findHistroyRecords=function(){$scope.findOne(),$http({method:"GET",url:"/records/member/"+$stateParams.memberId}).success(function(data){$scope.records=data})},$scope.returnBook=function(index){var _record=$scope.records[index];Records.get({recordId:_record._id},function(record){record.return_date=Date.now(),record.status="A",record.$update(),$scope.records[index].return_date=record.return_date,$scope.records[index].status="A"});var inventory=new Inventories(_record.inventory);inventory.isRent=!1,inventory.$update()}}]),angular.module("hbg").directive("searchMember",function(){return{restrict:"A",scope:{cn:"@"},transclude:!0,replace:!0,templateUrl:"modules/records/views/return-record.client.directive.template.html",controller:["$scope","$http","Records","Inventories",function($scope,$http,Records,Inventories){var loadRecords=function(data){for(var i=data.length-1;i>=0;i--)"R"===data[i].status&&$scope.records.push(data[i])};$scope.getMember=function(card_number){$http({method:"GET",url:"/members/card/"+card_number}).success(function(data){$scope.member=data,$scope.showMember=!0,console.log(data),console.log(card_number),$http({method:"GET",url:"/records/member/"+data._id}).success(loadRecords)})},$scope.returnBook=function(index){var _record=$scope.records[index];Records.get({recordId:_record._id},function(record){record.return_date=Date.now(),record.status="A",record.$update(),$scope.records.splice(index,1)});var inventory=new Inventories(_record.inventory);inventory.isRent=!1,inventory.$update()},$scope.reInit=function(){$scope.showMember=!1,$scope.member={},$scope.records=[]}}],link:function(scope){scope.$watch("cn",function(newVal){newVal&&(scope.reInit(),scope.getMember(scope.cn))})}}}),angular.module("members").factory("Members",["$resource",function($resource){return $resource("members/:memberId",{memberId:"@_id"},{update:{method:"PUT"}})}]),angular.module("records").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Records","records","dropdown","/records(/create)?"),Menus.addSubMenuItem("topbar","records","List Records","records"),Menus.addSubMenuItem("topbar","records","New Record","records/create")}]),angular.module("records").config(["$stateProvider",function($stateProvider){$stateProvider.state("createRecord",{url:"/records/create",templateUrl:"modules/records/views/create-record.client.view.html"}).state("returnBook",{url:"/records/return",templateUrl:"modules/records/views/return-record.client.view.html"})}]),angular.module("records").controller("RecordsController",["$scope","$timeout","$http","$stateParams","$location","Authentication","Records","Inventories",function($scope,$timeout,$http,$stateParams,$location,Authentication,Records,Inventories){$scope.authentication=Authentication,$scope.showResults=!1,$scope.inventories=[],$scope.select_inventories=[],$scope.saveSuccCount=0,$scope.saveErrMsg="";var timeout;$scope.create=function(member,inventory){var record=new Records({member:member,inventory:inventory,status:"R"});record.$save(function(){$scope.saveSuccCount++,$scope.saveSuccCount===$scope.totolSaveCount&&$location.path("members/"+member._id)},function(errorResponse){$scope.saveErrMsg+=errorResponse.data.message})},$scope.remove=function(record){if(record){record.$remove();for(var i in $scope.records)$scope.records[i]===record&&$scope.records.splice(i,1)}else $scope.record.$remove(function(){$location.path("records")})},$scope.update=function(){var record=$scope.record;record.$update(function(){$location.path("records/"+record._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.records=Records.query()},$scope.findOne=function(){$scope.record=Records.get({recordId:$stateParams.recordId})},$scope.$watch("card_number",function(newCardNumber){newCardNumber&&(timeout&&$timeout.cancel(timeout),timeout=$timeout(function(){$scope.member_invalid_msg="",$scope.member=null,$http({method:"GET",url:"/members/card/"+newCardNumber}).success(function(data){$scope.member=data,$scope.max_book=data.max_book||4,$http({method:"GET",url:"/records/member/"+$scope.member._id}).success(function(data){for(var on_rent=0,i=data.length-1;i;i--)"R"===data[i].status&&on_rent++;$scope.on_rent_book=on_rent,$scope.can_rent=$scope.member.max_book-on_rent>0?!0:!1});var a_d_ms=new Date($scope.member.active_time).getTime(),v_d_ms=a_d_ms+24*$scope.member.valid_days*3600*1e3;$scope.member_invalid_msg=Date.now()>v_d_ms?"会员卡到期":$scope.member.locked?"该会员已经被冻结":""})},850))}),$scope.$watch("keyword",function(newKeyword){newKeyword&&(timeout&&$timeout.cancel(timeout),timeout=$timeout(function(){$http({method:"GET",url:"/inventories/invCode/"+newKeyword}).success(function(data){$scope.inventories.push(data),$scope.keyword=""})},850))}),$scope.select=function(index){for(var isExist=!1,i=$scope.select_inventories.length-1;i>=0;i--)$scope.select_inventories[i].inv_code===$scope.inventories[index].inv_code&&(isExist=!0);isExist||$scope.select_inventories.push($scope.inventories[index]),$scope.inventories.splice(index,1)},$scope.remove=function(index){$scope.select_inventories.splice(index,1)},$scope.clear=function(index){$scope.inventories.splice(index,1)},$scope.saveRecord=function(){if($scope.select_inventories.length>$scope.member.max_book-$scope.on_rent_book)$scope.err_msg="请减少借阅的数目";else if(""!==$scope.member_invalid_msg)$scope.err_msg+="会员目前处于不可用状态";else{$scope.saveSuccCount=0,$scope.totolSaveCount=$scope.select_inventories.length;for(var i=$scope.select_inventories.length-1;i>=0;i--){$scope.create($scope.member,$scope.select_inventories[i]);var _inventory=new Inventories($scope.select_inventories[i]);_inventory.isRent=!0,_inventory.$update()}}},$scope.init=function(){$scope.showResults=!1,$scope.inventories=[],$scope.select_inventories=[],$scope.saveSuccCount=0,$scope.saveErrMsg="",$scope.card_number="",$scope.keyword=""}}]),angular.module("records").factory("Records",["$resource",function($resource){return $resource("records/:recordId",{recordId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:$location.path("403")}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("403",{url:"/403",templateUrl:"modules/users/views/authentication/403.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Members","Authentication",function($scope,$http,$location,Users,Members,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.getMemberCardNumber=function(){Members.get({memberId:$scope.user.member},function(data){$scope.user.member_card_number=data.card_number})},$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);